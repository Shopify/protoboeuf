# frozen_string_literal: true

require "erb"
require "syntax_tree"
require "pathname"

module ProtoBoeuf
  class AutoloaderGen
    # This class generates top-level autoloader modules for our well known types.  Given autogenerated .rb files like:
    #   - lib/protoboeuf/google/protobuf/foo.rb
    #   - lib/protoboeuf/google/protobuf/bar.rb
    #
    # generate lib/protoboeuf/google/protobuf.rb that looks like:
    #
    # module ProtoBoeuf
    #   module Google
    #     module Protobuf
    #       autoload :FooMessage1, "protoboeuf/google/protobuf/foo"
    #       autoload :FooMessage2, "protoboeuf/google/protobuf/foo"
    #       autoload :BarMessage1, "protoboeuf/google/protobuf/bar"
    #     end
    #   end
    # end

    BASE_LIB_DIR = File.expand_path("..", __dir__)

    attr_reader :module_filename,
      :child_ruby_filenames,
      :generated_autoloader_module_parts,
      :parent_module_parts,
      :require_paths_for_child_constants

    def initialize(module_filename, parent_module = "ProtoBoeuf::Google")
      @module_filename = module_filename
      @parent_module_parts = parent_module.split("::")

      # Given lib/protoboeuf/google.rb, glob lib/protoboeuf/google/**/*.rb
      @child_ruby_filenames = Dir[module_filename.pathmap("%X/**/*.rb")].sort
      autoloader_full_module_name = nil

      # Build a map of what we want to autoload :ConstantName => protoboeuf/require/path
      @require_paths_for_child_constants = child_ruby_filenames.each_with_object({}) do |filename, require_paths|
        child_constants = constants_for_child_ruby_filename(filename)
        # For the autoloader_full_module_name we can just pick the first child constant we come across and take up until
        # the first child constant of the parent_module.
        # For example, ProtoBoeuf::Google::Api::FieldBehavior would be ProtoBoeuf::Google::Api.
        if autoloader_full_module_name.nil?
          autoloader_full_module_name = child_constants.first.sub(/(#{parent_module}::.+?)::.*/, "\\1")
        end

        # Make our absolute filename relative to the base lib directory for our autoload calls.
        require_path = Pathname.new(filename).relative_path_from(BASE_LIB_DIR).sub_ext("")
        child_constants.each do |child_constant|
          # child_constant is fully qualified, but we just want the last part
          require_paths[child_constant.split("::").last] = require_path
        end
      end

      @generated_autoloader_module_parts = autoloader_full_module_name.split("::")
    end

    def to_ruby
      SyntaxTree.format(ERB.new(<<~RUBY, trim_mode: "-").result(binding))
        # frozen_string_literal: true
        # rubocop:disable all

        # Autogenerated by `rake well_known_types`.  Do not edit!
        <%- generated_autoloader_module_parts.each do |module_name| -%>
          module <%= module_name %>
        <%- end -%>

        <%-
          # Iterating over the sorted keys gives us lexographically sorted autoload statements
        -%>
        <%- require_paths_for_child_constants.keys.sort.each do |constant_name| -%>
          <%- require_path = require_paths_for_child_constants[constant_name] -%>
          autoload :<%= constant_name %>, "<%= require_path %>"
        <%- end -%>

        <%- generated_autoloader_module_parts.each do |module_name| -%>
          end
        <%- end -%>
      RUBY
    end

    private

    def constants_for_child_ruby_filename(filename)
      @constants_for_child_ruby_filename ||= {}

      return @constants_for_child_ruby_filename[filename] if @constants_for_child_ruby_filename.key?(filename)

      loaded = Module.new do
        module_eval File.binread(filename)
      end

      @constants_for_child_ruby_filename[filename] = loaded::ProtoBoeuf::Google.constants.flat_map do |const_name|
        mod = loaded
        parent_module_parts.each do |part|
          mod = mod.const_get(part)
        end
        mod = mod.const_get(const_name)

        next unless mod.is_a?(Module)

        # The top-level module will be our anonymous Module we created above
        parent_module_name = mod.name.split("::")[1..].join("::")

        mod.constants.map { |const_name| "#{parent_module_name}::#{const_name}" }
      end
    end
  end
end
