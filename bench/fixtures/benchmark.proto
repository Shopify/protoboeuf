syntax = "proto3";

package upstream;

//
// This aims to be a larger, more representative benchmark
// The messages intentionally use nesting and have many fields of
// multiple different types.
//

/*
message Position
{
  uint32 x = 1;
  uint32 y = 2;
  uint32 z = 3;
}

message TrunkItem
{
  enum ITEM_TYPE {
    LAPTOP = 0;
    DUFFEL_BAG = 1;
    GOLF_CLUBS = 2;
    BASEBALL_BAT = 3;
    SUITCASE = 4;
    BRICKS = 5;
    CROWBAR = 6;
    CASH = 7;
    POKEMON_CARDS = 8;
  }

  string id = 1;
  string owner_id = 2;
  uint64 width = 3;
  uint64 height = 4;
  uint64 depth = 5;
  uint64 weight = 6;
  Position pos = 7;
  double monetary_value = 8;
  ITEM_TYPE item_type = 9;
}

message Vehicle
{
  enum VEHICLE_TYPE {
    CAR = 0;
    SPORTS_CAR = 1;
    SUV = 2;
    PICKUP_TRUCK = 3;
    MINIVAN = 4;
    MOTORCYCLE = 5;
  }

  uint64 id = 1;
  string make = 2;
  string model = 3;
  VEHICLE_TYPE type = 4;

  uint32 num_doors = 5;
  uint32 num_wheels = 6;
  uint32 num_windows = 7;

  uint64 dry_weight = 8;
  uint64 trunk_volume = 9;
  double monetary_value = 10;

  // List of items in the trunk
  repeated TrunkItem trunk_items = 11;
}
*/


// TODO: ParkingSpace?
// bool electric?
// optional vehicle?






message ParkingFloor
{
  uint64 id = 1;
  uint32 num_spaces = 2;
  uint32 num_electric = 3;
  uint32 num_fire_exits = 4;
  uint32 num_sprinklers = 5;
  double area_sqft = 6;

  // inches because 'Murica
  // Also we don't want too many doubles because that
  // wouldn't be representative of most real-world use cases
  uint32 ceiling_height_inches = 7;

  // List of vehicles
  //repeated Vehicle vehicles = 8;
}

message ParkingLot
{
  string name = 1;
  string district = 2;
  string phone_number = 3;
  uint64 id = 4;
  uint32 num_floors = 5;
  uint32 num_entrances = 6;
  uint32 num_attendants = 7;

  // List of floors
  repeated ParkingFloor floors = 8;
}
